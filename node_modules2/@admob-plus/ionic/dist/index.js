var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { cordova, IonicNativePlugin } from '@ionic-native/core';
import { fromEvent } from 'rxjs';
var Banner = /** @class */ (function (_super) {
    __extends(Banner, _super);
    function Banner() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Banner.prototype.hide = function (id) {
        return cordova(this, 'hide', { otherPromise: true }, arguments);
    };
    Banner.prototype.show = function (opts) {
        return cordova(this, 'show', { otherPromise: true }, arguments);
    };
    Banner.plugin = 'cordova-admob-plus';
    Banner.pluginName = 'AdMob';
    Banner.pluginRef = 'admob.banner';
    return Banner;
}(IonicNativePlugin));
export { Banner };
var Interstitial = /** @class */ (function (_super) {
    __extends(Interstitial, _super);
    function Interstitial() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Interstitial.prototype.load = function (opts) {
        return cordova(this, 'load', { otherPromise: true }, arguments);
    };
    Interstitial.prototype.show = function () {
        return cordova(this, 'show', { otherPromise: true }, arguments);
    };
    Interstitial.plugin = 'cordova-admob-plus';
    Interstitial.pluginName = 'AdMob';
    Interstitial.pluginRef = 'admob.interstitial';
    return Interstitial;
}(IonicNativePlugin));
export { Interstitial };
var RewardVideo = /** @class */ (function (_super) {
    __extends(RewardVideo, _super);
    function RewardVideo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RewardVideo.prototype.load = function (opts) {
        return cordova(this, 'load', { otherPromise: true }, arguments);
    };
    RewardVideo.prototype.show = function () {
        return cordova(this, 'show', { otherPromise: true }, arguments);
    };
    RewardVideo.plugin = 'cordova-admob-plus';
    RewardVideo.pluginName = 'AdMob';
    RewardVideo.pluginRef = 'admob.rewardVideo';
    return RewardVideo;
}(IonicNativePlugin));
export { RewardVideo };
var AdMob = /** @class */ (function (_super) {
    __extends(AdMob, _super);
    function AdMob() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.banner = new Banner();
        _this.interstitial = new Interstitial();
        _this.rewardVideo = new RewardVideo();
        return _this;
    }
    AdMob.prototype.setAppMuted = function (value) {
        return cordova(this, 'setAppMuted', { otherPromise: true }, arguments);
    };
    AdMob.prototype.setAppVolume = function (value) {
        return cordova(this, 'setAppVolume', { otherPromise: true }, arguments);
    };
    AdMob.prototype.setDevMode = function (value) {
        return cordova(this, 'setDevMode', { sync: true }, arguments);
    };
    AdMob.prototype.on = function (event) {
        return fromEvent(document, event);
    };
    AdMob.platforms = ['Android', 'iOS'];
    AdMob.plugin = 'cordova-admob-plus';
    AdMob.pluginName = 'AdMob';
    AdMob.pluginRef = 'admob';
    AdMob.repo = 'https://github.com/admob-plus/admob-plus';
    AdMob = __decorate([
        Injectable()
    ], AdMob);
    return AdMob;
}(IonicNativePlugin));
export { AdMob };
//# sourceMappingURL=index.js.map