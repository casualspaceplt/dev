{"version":3,"sources":["../../../projects/ng-gallery/lightbox/src/lightbox.model.ts","../../../projects/ng-gallery/lightbox/src/lightbox.animation.ts","../../../projects/ng-gallery/lightbox/src/lightbox.component.ts","../../../projects/ng-gallery/lightbox/src/lightbox.default.ts","../../../projects/ng-gallery/lightbox/src/lightbox.service.ts","../../../projects/ng-gallery/lightbox/src/gallerize.directive.ts","../../../projects/ng-gallery/lightbox/src/lightbox.directive.ts","../../../projects/ng-gallery/lightbox/src/lightbox.module.ts"],"names":["LIGHTBOX_CONFIG","InjectionToken","lightboxAnimation","trigger","state","style","opacity","transform","transition","animate","LightboxComponent","_document","_focusTrapFactory","_elementRef","sanitizer","this","_savePreviouslyFocusedElement","prototype","onAnimationDone","event","toState","_trapFocus","overlayRef","dispose","_restoreFocus","_focusTrap","create","nativeElement","focusInitialElementWhenReady","_this","_elementFocusedBeforeDialogWasOpened","activeElement","focus","Promise","resolve","then","toFocus","destroy","Component","args","selector","changeDetection","ChangeDetectionStrategy","OnPush","animations","template","host","tabindex","aria-modal","[attr.id]","[attr.role]","[attr.aria-labelledby]","[attr.aria-label]","[attr.aria-describedby]","[@lightbox]","(@lightbox.done)","Optional","type","Inject","DOCUMENT","ConfigurableFocusTrapFactory","ElementRef","DomSanitizer","defaultConfig","backdropClass","panelClass","hasBackdrop","keyboardShortcuts","role","startAnimationTime","exitAnimationTime","closeIcon","Lightbox","config","_gallery","_overlay","opened","Subject","closed","_config","Object","assign","setConfig","open","i","id","overlayConfig","positionStrategy","position","global","centerHorizontally","centerVertically","scrollStrategy","scrollStrategies","block","disposeOnNavigation","galleryRef","ref","set","_overlayRef","attachments","subscribe","next","detachments","galleryPortal","ComponentPortal","lightboxRef","attach","instance","ariaLabel","ariaLabelledBy","ariaDescribedBy","backdropClick","close","keydownEvents","keyCode","LEFT_ARROW","prev","RIGHT_ARROW","ESCAPE","hasAttached","detach","Injectable","Gallery","Overlay","GallerizeDirective","_zone","_el","_lightbox","_renderer","platform","_galleryCmp","_galleryId","isPlatformBrowser","_mode","ngOnInit","runOutsideAngular","gallerize","detectorMode","galleryMode","ngOnDestroy","_detector$","complete","_observer$","disconnect","_itemClick$","unsubscribe","_itemChange$","itemClick","itemsChanged","load","items","pipe","debounceTime","switchMap","imageElements","querySelectorAll","length","images_1","from","map","el","setStyle","setProperty","run","HTMLImageElement","src","getAttribute","thumb","background","currentStyle","defaultView","getComputedStyle","backgroundImage","slice","replace","tap","data","push","ImageItem","finalize","EMPTY","MutationObserver","observe","childList","subtree","Directive","NgZone","Renderer2","decorators","PLATFORM_ID","GalleryComponent","Host","Self","Input","LightboxDirective","clickEvent","Subscription","index","fromEvent","LightboxModule","withConfig","ngModule","providers","provide","useValue","NgModule","imports","OverlayModule","GalleryModule","A11yModule","declarations","exports","entryComponents"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const LIGHTBOX_CONFIG = new InjectionToken<LightboxConfig>('LIGHTBOX_CONFIG');\n\nexport interface LightboxConfig {\n  backdropClass?: string;\n  panelClass?: string;\n  hasBackdrop?: boolean;\n  keyboardShortcuts?: boolean;\n  closeIcon?: string;\n  role?: string;\n  ariaLabelledBy?: string;\n  ariaLabel?: string;\n  ariaDescribedBy?: string;\n  startAnimationTime?: number;\n  exitAnimationTime?: number;\n}\n","import { animate, state, style, transition, trigger } from '@angular/animations';\n\nexport const lightboxAnimation = trigger('lightbox', [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('{{startAnimationTime}}ms cubic-bezier(0, 0, 0.2, 1)',\n    style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n    animate('{{exitAnimationTime}}ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n]);\n\n","import { Component, Optional, ChangeDetectionStrategy, ElementRef, Inject } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { DOCUMENT } from '@angular/common';\nimport { AnimationEvent } from '@angular/animations';\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { FocusTrap, ConfigurableFocusTrapFactory } from '@angular/cdk/a11y';\nimport { lightboxAnimation } from './lightbox.animation';\n\n@Component({\n  selector: 'lightbox',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [lightboxAnimation],\n  styleUrls: ['./lightbox.component.scss'],\n  template: `\n    <gallery [id]=\"id\" [destroyRef]=\"false\" [skipInitConfig]=\"true\">\n      <i class=\"g-btn-close\" aria-label=\"Close\" (click)=\"overlayRef.detach()\"\n         [innerHTML]=\"sanitizer.bypassSecurityTrustHtml(closeIcon)\"></i>\n    </gallery>\n  `,\n  host: {\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '\"lightbox-\" + id',\n    '[attr.role]': 'role',\n    '[attr.aria-labelledby]': 'ariaLabel ? null : ariaLabelledBy',\n    '[attr.aria-label]': 'ariaLabel',\n    '[attr.aria-describedby]': 'ariaDescribedBy || null',\n    '[@lightbox]': '{ value: state, params: { startAnimationTime: startAnimationTime, exitAnimationTime: exitAnimationTime } }',\n    '(@lightbox.done)': 'onAnimationDone($event)',\n  }\n})\nexport class LightboxComponent {\n\n  /** Gallery ref id */\n  id: string;\n\n  /** Overlay ref to close the lightbox */\n  overlayRef: OverlayRef;\n\n  /** Close button svg data */\n  closeIcon: string;\n\n  /** State of the lightbox animation. */\n  state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** The ARIA role of the lightbox element. */\n  role: string;\n\n  /** Aria label to assign to the lightbox element */\n  ariaLabel: string;\n\n  /** ID of the element that should be considered as the lightbox's label. */\n  ariaLabelledBy: string;\n\n  /** ID of the element that describes the lightbox. */\n  ariaDescribedBy: string;\n\n  /** The lightbox start animation time in ms */\n  startAnimationTime: number;\n\n  /** The lightbox exit animation time in ms */\n  exitAnimationTime: number;\n\n  /** The class that traps and manages focus within the lightbox. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the lightbox was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement;\n\n  constructor(@Optional() @Inject(DOCUMENT) private _document: any,\n              private _focusTrapFactory: ConfigurableFocusTrapFactory,\n              private _elementRef: ElementRef,\n              public sanitizer: DomSanitizer) {\n    this._savePreviouslyFocusedElement();\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else {\n      this.overlayRef.dispose();\n      this._restoreFocus();\n    }\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n    // If were to attempt to focus immediately, then the content of the lightbox would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Saves a reference to the element that was focused before the lightbox was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the lightbox immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Restores focus to the element that was focused before the lightbox opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n}\n","import { LightboxConfig } from './lightbox.model';\n\nexport const defaultConfig: LightboxConfig = {\n  backdropClass: 'g-backdrop',\n  panelClass: 'g-overlay',\n  hasBackdrop: true,\n  keyboardShortcuts: true,\n  role: 'lightbox',\n  startAnimationTime: 150,\n  exitAnimationTime: 75,\n  closeIcon: `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg width=\"512px\" height=\"512px\" enable-background=\"new 0 0 47.971 47.971\" version=\"1.1\" viewBox=\"0 0 47.971 47.971\" xml:space=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\">\n\t<path d=\"M28.228,23.986L47.092,5.122c1.172-1.171,1.172-3.071,0-4.242c-1.172-1.172-3.07-1.172-4.242,0L23.986,19.744L5.121,0.88   c-1.172-1.172-3.07-1.172-4.242,0c-1.172,1.171-1.172,3.071,0,4.242l18.865,18.864L0.879,42.85c-1.172,1.171-1.172,3.071,0,4.242   C1.465,47.677,2.233,47.97,3,47.97s1.535-0.293,2.121-0.879l18.865-18.864L42.85,47.091c0.586,0.586,1.354,0.879,2.121,0.879   s1.535-0.293,2.121-0.879c1.172-1.171,1.172-3.071,0-4.242L28.228,23.986z\" fill=\"#fff\"/>\n</svg>\n`\n};\n","import { ComponentRef, Inject, Injectable, Optional } from '@angular/core';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Overlay, OverlayRef, OverlayConfig } from '@angular/cdk/overlay';\nimport { LEFT_ARROW, RIGHT_ARROW, ESCAPE } from '@angular/cdk/keycodes';\nimport { Subject } from 'rxjs';\n\nimport { Gallery } from 'ng-gallery';\n// Uncomment the following line in development mode\n// import { Gallery } from '../../src/public-api';\n\nimport { LightboxConfig, LIGHTBOX_CONFIG } from './lightbox.model';\nimport { defaultConfig } from './lightbox.default';\nimport { LightboxComponent } from './lightbox.component';\n\n@Injectable()\nexport class Lightbox {\n\n  /** Gallery overlay ref */\n  private _overlayRef: OverlayRef;\n\n  /** Global config */\n  private _config: LightboxConfig;\n\n  /** Stream that emits when lightbox is opened */\n  opened = new Subject<string>();\n\n  /** Stream that emits when lightbox is closed */\n  closed = new Subject<string>();\n\n  constructor(@Optional() @Inject(LIGHTBOX_CONFIG) config: LightboxConfig, private _gallery: Gallery, private _overlay: Overlay) {\n    this._config = config ? {...defaultConfig, ...config} : defaultConfig;\n  }\n\n  /**\n   * Set Lightbox Config\n   * @param config - LightboxConfig\n   */\n  setConfig(config: LightboxConfig) {\n    this._config = {...this._config, ...config};\n  }\n\n  /**\n   * Open Lightbox Overlay\n   * @param i - Current Index\n   * @param id - Gallery ID\n   * @param config - Lightbox Config\n   */\n  open(i = 0, id = 'lightbox', config?: LightboxConfig) {\n\n    const _config = config ? {...this._config, ...config} : this._config;\n\n    const overlayConfig: OverlayConfig = {\n      backdropClass: _config.backdropClass,\n      panelClass: _config.panelClass,\n      hasBackdrop: _config.hasBackdrop,\n      positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      disposeOnNavigation: true\n    };\n\n    const galleryRef = this._gallery.ref(id);\n    galleryRef.set(i);\n\n    this._overlayRef = this._overlay.create(overlayConfig);\n\n    // overlay opened event\n    this._overlayRef.attachments().subscribe(() => this.opened.next(id));\n\n    // overlay closed event\n    this._overlayRef.detachments().subscribe(() => this.closed.next(id));\n\n    // Attach gallery to the overlay\n    const galleryPortal = new ComponentPortal(LightboxComponent);\n    const lightboxRef: ComponentRef<LightboxComponent> = this._overlayRef.attach(galleryPortal);\n\n    lightboxRef.instance.id = id;\n    lightboxRef.instance.overlayRef = this._overlayRef;\n    lightboxRef.instance.closeIcon = this._config.closeIcon;\n    lightboxRef.instance.role = this._config.role;\n    lightboxRef.instance.ariaLabel = this._config.ariaLabel;\n    lightboxRef.instance.ariaLabelledBy = this._config.ariaLabelledBy;\n    lightboxRef.instance.ariaDescribedBy = this._config.ariaDescribedBy;\n    lightboxRef.instance.startAnimationTime = this._config.startAnimationTime;\n    lightboxRef.instance.exitAnimationTime = this._config.exitAnimationTime;\n\n    if (_config.hasBackdrop) {\n      this._overlayRef.backdropClick().subscribe(() => this.close());\n    }\n\n    // Add keyboard shortcuts\n    if (_config.keyboardShortcuts) {\n      this._overlayRef.keydownEvents().subscribe((event: any) => {\n        switch (event.keyCode) {\n          case LEFT_ARROW:\n            galleryRef.prev();\n            break;\n          case RIGHT_ARROW:\n            galleryRef.next();\n            break;\n          case ESCAPE:\n            this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close Lightbox Overlay\n   */\n  close() {\n    if (this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n  }\n}\n","import {\n  Directive,\n  Input,\n  OnInit,\n  OnDestroy,\n  Inject,\n  Optional,\n  Self,\n  Host,\n  NgZone,\n  ElementRef,\n  Renderer2,\n  PLATFORM_ID\n} from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\n\nimport { Gallery, GalleryRef, ImageItem, GalleryComponent, GalleryState, GalleryItem } from 'ng-gallery';\n// Uncomment the following line in development mode\n// import { Gallery, GalleryRef, ImageItem, GalleryComponent, GalleryState, GalleryItem } from '../../src/public-api';\nimport { Lightbox } from './lightbox.service';\n\nimport { Subject, Subscription, from, EMPTY } from 'rxjs';\nimport { tap, map, switchMap, finalize, debounceTime } from 'rxjs/operators';\n\n/**\n * This directive has 2 modes:\n * 1 - If host element is a HTMLElement, it detects the images and hooks their clicks to lightbox\n * 2 - If host element is a GalleryComponent, it hooks the images click to the lightbox\n */\n\nconst enum GallerizeMode {\n  Detector = 'detector',\n  Gallery = 'gallery'\n}\n\n@Directive({\n  selector: '[gallerize]'\n})\nexport class GallerizeDirective implements OnInit, OnDestroy {\n\n  /** Default gallery id */\n  private _galleryId = 'lightbox';\n\n  /** Gallerize mode */\n  private readonly _mode: GallerizeMode;\n\n  /** If host element is a HTMLElement, will use the following variables: */\n\n  /** Stream that emits to fire the detection stream the image elements has changed */\n  private _observer$: any;\n\n  /** Stream that emits when image is discover */\n  private _detector$: Subject<any>;\n\n  /** If host element is a GalleryComponent, will use the following variables: */\n\n  /** Gallery events (if used on a gallery component) */\n  private _itemClick$: Subscription;\n  private _itemChange$: Subscription;\n\n  // ======================================================\n\n  /** If set, it will become the gallery id */\n  @Input() gallerize: string;\n\n  /** The selector used to query images elements */\n  @Input() selector = 'img';\n\n  constructor(private _zone: NgZone,\n              private _el: ElementRef,\n              private _gallery: Gallery,\n              private _lightbox: Lightbox,\n              private _renderer: Renderer2,\n              @Inject(PLATFORM_ID) platform: Object,\n              @Inject(DOCUMENT) private _document: any,\n              @Host() @Self() @Optional() private _galleryCmp: GalleryComponent) {\n\n    // Set gallerize mode\n    if (isPlatformBrowser(platform)) {\n      this._mode = _galleryCmp ? GallerizeMode.Gallery : GallerizeMode.Detector;\n    }\n  }\n\n  ngOnInit() {\n    this._zone.runOutsideAngular(() => {\n      this._galleryId = this.gallerize || this._galleryId;\n      const ref = this._gallery.ref(this._galleryId);\n\n      switch (this._mode) {\n        case GallerizeMode.Detector:\n          this.detectorMode(ref);\n          break;\n        case GallerizeMode.Gallery:\n          this.galleryMode(ref);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    switch (this._mode) {\n      case GallerizeMode.Detector:\n        this._detector$.complete();\n        this._observer$.disconnect();\n        break;\n      case GallerizeMode.Gallery:\n        this._itemClick$.unsubscribe();\n        this._itemChange$.unsubscribe();\n    }\n  }\n\n  /** Gallery mode: means `gallerize` directive is used on `<gallery>` component\n   * Adds a click event to each gallery item so it opens in lightbox */\n  private galleryMode(galleryRef: GalleryRef) {\n    // Clone its items to the new gallery instance\n    this._itemClick$ = this._galleryCmp.galleryRef.itemClick.subscribe((i: number) => this._lightbox.open(i, this._galleryId));\n    this._itemChange$ = this._galleryCmp.galleryRef.itemsChanged.subscribe((state: GalleryState) => galleryRef.load(state.items));\n  }\n\n  /** Detector mode: means `gallerize` directive is used on a normal HTMLElement\n   *  Detects images and adds a click event to each image so it opens in the lightbox */\n  private detectorMode(galleryRef: GalleryRef) {\n    this._detector$ = new Subject();\n    // Query image elements\n    this._detector$.pipe(\n      debounceTime(300),\n      switchMap(() => {\n\n        /** get all img elements from content */\n        const imageElements = this._el.nativeElement.querySelectorAll(this.selector);\n\n        if (imageElements && imageElements.length) {\n\n          const images: GalleryItem[] = [];\n\n          return from(imageElements).pipe(\n            map((el: any, i) => {\n              // Add click event to the image\n              this._renderer.setStyle(el, 'cursor', 'pointer');\n              this._renderer.setProperty(el, 'onclick', () =>\n                this._zone.run(() => this._lightbox.open(i, this._galleryId))\n              );\n\n              if (el instanceof HTMLImageElement) {\n                // If element is type of img use the src property\n                return {\n                  src: el.getAttribute('imageSrc') || el.src,\n                  thumb: el.getAttribute('thumbSrc') || el.src\n                };\n              } else {\n                // Otherwise, use element background-image url\n                const elStyle = el.currentStyle || this._document.defaultView.getComputedStyle(el, null);\n                const background = elStyle.backgroundImage.slice(4, -1).replace(/\"/g, '');\n                return {\n                  src: el.getAttribute('imageSrc') || background,\n                  thumb: el.getAttribute('thumbSrc') || background\n                };\n              }\n            }),\n            tap((data: any) => images.push(new ImageItem(data))),\n            finalize(() => galleryRef.load(images))\n          );\n        } else {\n          return EMPTY;\n        }\n      })\n    ).subscribe();\n\n    // Observe content changes\n    this._observer$ = new MutationObserver(() => this._detector$.next());\n    this._observer$.observe(this._el.nativeElement, {childList: true, subtree: true});\n  }\n}\n","import { Directive, ElementRef, OnInit, Input, OnDestroy, Renderer2 } from '@angular/core';\nimport { fromEvent, SubscriptionLike, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Lightbox } from './lightbox.service';\n\n@Directive({\n  selector: '[lightbox]'\n})\nexport class LightboxDirective implements OnInit, OnDestroy {\n\n  clickEvent: SubscriptionLike = Subscription.EMPTY;\n\n  @Input('lightbox') index = 0;\n  @Input('gallery') id = 'root';\n\n  constructor(private _lightbox: Lightbox, private _el: ElementRef, private _renderer: Renderer2) {\n  }\n\n  ngOnInit() {\n    this._renderer.setStyle(this._el.nativeElement, 'cursor', 'pointer');\n    this.clickEvent = fromEvent(this._el.nativeElement, 'click').pipe(\n      tap(() => this._lightbox.open(this.index, this.id))\n    ).subscribe();\n  }\n\n  ngOnDestroy() {\n    this.clickEvent.unsubscribe();\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { A11yModule } from '@angular/cdk/a11y';\n\nimport { GalleryModule } from 'ng-gallery';\n// Uncomment the following line in development mode\n// import { GalleryModule } from '../../src/public-api';\n\nimport { Lightbox } from './lightbox.service';\nimport { LightboxComponent } from './lightbox.component';\nimport { LightboxDirective } from './lightbox.directive';\nimport { LightboxConfig, LIGHTBOX_CONFIG } from './lightbox.model';\nimport { GallerizeDirective } from './gallerize.directive';\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    GalleryModule,\n    A11yModule\n  ],\n  declarations: [\n    LightboxComponent,\n    LightboxDirective,\n    GallerizeDirective\n  ],\n  exports: [\n    LightboxDirective,\n    GallerizeDirective\n  ],\n  providers: [\n    Lightbox\n  ],\n  entryComponents: [\n    LightboxComponent\n  ]\n})\nexport class LightboxModule {\n  static withConfig(config: LightboxConfig): ModuleWithProviders<LightboxModule> {\n    return {\n      ngModule: LightboxModule,\n      providers: [\n        {\n          provide: LIGHTBOX_CONFIG,\n          useValue: config\n        }\n      ]\n    };\n  }\n}\n"]}