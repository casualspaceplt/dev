import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var SafariViewController = /** @class */ (function (_super) {
    __extends(SafariViewController, _super);
    function SafariViewController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SafariViewController.prototype.isAvailable = function () { return cordova(this, "isAvailable", {}, arguments); };
    SafariViewController.prototype.show = function (options) { return cordova(this, "show", { "successIndex": 1, "errorIndex": 2, "observable": true }, arguments); };
    SafariViewController.prototype.hide = function () { return cordova(this, "hide", {}, arguments); };
    SafariViewController.prototype.connectToService = function () { return cordova(this, "connectToService", {}, arguments); };
    SafariViewController.prototype.warmUp = function () { return cordova(this, "warmUp", {}, arguments); };
    SafariViewController.prototype.mayLaunchUrl = function (url) { return cordova(this, "mayLaunchUrl", {}, arguments); };
    SafariViewController.pluginName = "SafariViewController";
    SafariViewController.plugin = "cordova-plugin-safariviewcontroller";
    SafariViewController.pluginRef = "SafariViewController";
    SafariViewController.repo = "https://github.com/EddyVerbruggen/cordova-plugin-safariviewcontroller";
    SafariViewController.platforms = ["Android", "iOS"];
    SafariViewController.decorators = [
        { type: Injectable }
    ];
    return SafariViewController;
}(IonicNativePlugin));
export { SafariViewController };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3NhZmFyaS12aWV3LWNvbnRyb2xsZXIvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUFtRVEsd0NBQWlCOzs7O0lBTXpELDBDQUFXO0lBY1gsbUNBQUksYUFBQyxPQUFxQztJQVExQyxtQ0FBSTtJQVNKLCtDQUFnQjtJQVNoQixxQ0FBTTtJQVVOLDJDQUFZLGFBQUMsR0FBVzs7Ozs7OztnQkF6RHpCLFVBQVU7OytCQXBFWDtFQXFFMEMsaUJBQWlCO1NBQTlDLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNhZmFyaVZpZXdDb250cm9sbGVyT3B0aW9ucyB7XG4gIGFuaW1hdGVkPzogYm9vbGVhbjtcbiAgYmFyQ29sb3I/OiBzdHJpbmc7XG4gIGNvbnRyb2xUaW50Q29sb3I/OiBzdHJpbmc7XG4gIGVudGVyUmVhZGVyTW9kZUlmQXZhaWxhYmxlPzogYm9vbGVhbjtcbiAgaGlkZGVuPzogYm9vbGVhbjtcbiAgc2hvd0RlZmF1bHRTaGFyZU1lbnVJdGVtPzogYm9vbGVhbjtcbiAgdGludENvbG9yPzogc3RyaW5nO1xuICB0b29sYmFyQ29sb3I/OiBzdHJpbmc7XG4gIHRyYW5zaXRpb24/OiBzdHJpbmc7XG4gIHVybD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBAbmFtZSBTYWZhcmkgVmlldyBDb250cm9sbGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqIEZvciBkaXNwbGF5aW5nIHJlYWQtb25seSB3ZWIgY29udGVudC5cbiAqXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYGNvcmRvdmEtcGx1Z2luLXNhZmFyaXZpZXdjb250cm9sbGVyYC4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW1NhZmFyaSBWaWV3IENvbnRyb2xsZXIgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9FZGR5VmVyYnJ1Z2dlbi9jb3Jkb3ZhLXBsdWdpbi1zYWZhcml2aWV3Y29udHJvbGxlcikuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBTYWZhcmlWaWV3Q29udHJvbGxlciB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvc2FmYXJpLXZpZXctY29udHJvbGxlci9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgc2FmYXJpVmlld0NvbnRyb2xsZXI6IFNhZmFyaVZpZXdDb250cm9sbGVyKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLnNhZmFyaVZpZXdDb250cm9sbGVyLmlzQXZhaWxhYmxlKClcbiAqICAgLnRoZW4oKGF2YWlsYWJsZTogYm9vbGVhbikgPT4ge1xuICogICAgICAgaWYgKGF2YWlsYWJsZSkge1xuICpcbiAqICAgICAgICAgdGhpcy5zYWZhcmlWaWV3Q29udHJvbGxlci5zaG93KHtcbiAqICAgICAgICAgICB1cmw6ICdodHRwOi8vaW9uaWMuaW8nLFxuICogICAgICAgICAgIGhpZGRlbjogZmFsc2UsXG4gKiAgICAgICAgICAgYW5pbWF0ZWQ6IGZhbHNlLFxuICogICAgICAgICAgIHRyYW5zaXRpb246ICdjdXJsJyxcbiAqICAgICAgICAgICBlbnRlclJlYWRlck1vZGVJZkF2YWlsYWJsZTogdHJ1ZSxcbiAqICAgICAgICAgICB0aW50Q29sb3I6ICcjZmYwMDAwJ1xuICogICAgICAgICB9KVxuICogICAgICAgICAuc3Vic2NyaWJlKChyZXN1bHQ6IGFueSkgPT4ge1xuICogICAgICAgICAgICAgaWYocmVzdWx0LmV2ZW50ID09PSAnb3BlbmVkJykgY29uc29sZS5sb2coJ09wZW5lZCcpO1xuICogICAgICAgICAgICAgZWxzZSBpZihyZXN1bHQuZXZlbnQgPT09ICdsb2FkZWQnKSBjb25zb2xlLmxvZygnTG9hZGVkJyk7XG4gKiAgICAgICAgICAgICBlbHNlIGlmKHJlc3VsdC5ldmVudCA9PT0gJ2Nsb3NlZCcpIGNvbnNvbGUubG9nKCdDbG9zZWQnKTtcbiAqICAgICAgICAgICB9LFxuICogICAgICAgICAgIChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKVxuICogICAgICAgICApO1xuICpcbiAqICAgICAgIH0gZWxzZSB7XG4gKiAgICAgICAgIC8vIHVzZSBmYWxsYmFjayBicm93c2VyLCBleGFtcGxlIEluQXBwQnJvd3NlclxuICogICAgICAgfVxuICogICAgIH1cbiAqICAgKTtcbiAqIGBgYFxuICogQGludGVyZmFjZXNcbiAqIFNhZmFyaVZpZXdDb250cm9sbGVyT3B0aW9uc1xuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ1NhZmFyaVZpZXdDb250cm9sbGVyJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tc2FmYXJpdmlld2NvbnRyb2xsZXInLFxuICBwbHVnaW5SZWY6ICdTYWZhcmlWaWV3Q29udHJvbGxlcicsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vRWRkeVZlcmJydWdnZW4vY29yZG92YS1wbHVnaW4tc2FmYXJpdmlld2NvbnRyb2xsZXInLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU2FmYXJpVmlld0NvbnRyb2xsZXIgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBDaGVja3MgaWYgU2FmYXJpVmlld0NvbnRyb2xsZXIgaXMgYXZhaWxhYmxlXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBpc0F2YWlsYWJsZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2hvd3MgU2FmYXJpIFZpZXcgQ29udHJvbGxlclxuICAgKiBAcGFyYW0gb3B0aW9ucyB7U2FmYXJpVmlld0NvbnRyb2xsZXJPcHRpb25zfSBvcHRpb25hbFxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN1Y2Nlc3NJbmRleDogMSxcbiAgICBlcnJvckluZGV4OiAyLFxuICAgIG9ic2VydmFibGU6IHRydWUsXG4gIH0pXG4gIHNob3cob3B0aW9ucz86IFNhZmFyaVZpZXdDb250cm9sbGVyT3B0aW9ucyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEhpZGVzIFNhZmFyaSBWaWV3IENvbnRyb2xsZXJcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaGlkZSgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmllcyB0byBjb25uZWN0IHRvIHRoZSAgQ2hyb21lJ3MgY3VzdG9tIHRhYnMgc2VydmljZS4geW91IG11c3QgY2FsbCB0aGlzIG1ldGhvZCBiZWZvcmUgY2FsbGluZyBhbnkgb2YgdGhlIG90aGVyIG1ldGhvZHMgbGlzdGVkIGJlbG93LlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjb25uZWN0VG9TZXJ2aWNlKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGwgdGhpcyBtZXRob2Qgd2hlbmV2ZXIgdGhlcmUncyBhIGNoYW5jZSB0aGUgdXNlciB3aWxsIG9wZW4gYW4gZXh0ZXJuYWwgdXJsLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICB3YXJtVXAoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRm9yIGV2ZW4gYmV0dGVyIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbiwgY2FsbCB0aGlzIG1ldGhvZHMgaWYgdGhlcmUncyBtb3JlIHRoYW4gYSA1MCUgY2hhbmNlIHRoZSB1c2VyIHdpbGwgb3BlbiBhIGNlcnRhaW4gVVJMLlxuICAgKiBAcGFyYW0gdXJse3N0cmluZ31cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgbWF5TGF1bmNoVXJsKHVybDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==