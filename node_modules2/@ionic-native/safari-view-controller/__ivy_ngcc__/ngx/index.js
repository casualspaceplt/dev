import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
var SafariViewController = /** @class */ (function (_super) {
    __extends(SafariViewController, _super);
    function SafariViewController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SafariViewController.prototype.isAvailable = function () { return cordova(this, "isAvailable", {}, arguments); };
    SafariViewController.prototype.show = function (options) { return cordova(this, "show", { "successIndex": 1, "errorIndex": 2, "observable": true }, arguments); };
    SafariViewController.prototype.hide = function () { return cordova(this, "hide", {}, arguments); };
    SafariViewController.prototype.connectToService = function () { return cordova(this, "connectToService", {}, arguments); };
    SafariViewController.prototype.warmUp = function () { return cordova(this, "warmUp", {}, arguments); };
    SafariViewController.prototype.mayLaunchUrl = function (url) { return cordova(this, "mayLaunchUrl", {}, arguments); };
    SafariViewController.pluginName = "SafariViewController";
    SafariViewController.plugin = "cordova-plugin-safariviewcontroller";
    SafariViewController.pluginRef = "SafariViewController";
    SafariViewController.repo = "https://github.com/EddyVerbruggen/cordova-plugin-safariviewcontroller";
    SafariViewController.platforms = ["Android", "iOS"];
SafariViewController.ɵfac = function SafariViewController_Factory(t) { return ɵSafariViewController_BaseFactory(t || SafariViewController); };
SafariViewController.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: SafariViewController, factory: function (t) { return SafariViewController.ɵfac(t); } });
var ɵSafariViewController_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(SafariViewController);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SafariViewController, [{
        type: Injectable
    }], null, null); })();
    return SafariViewController;
}(IonicNativePlugin));
export { SafariViewController };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvc2FmYXJpLXZpZXctY29udHJvbGxlci9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztBQUNsQztBQUVjLElBZ0U0Qix3Q0FBaUI7QUFBQztBQUU5QjtBQUk1QjtBQUFNLElBQU4sMENBQVc7QUFLYSxJQVN4QixtQ0FBSSxhQUFDLE9BQXFDO0FBUWpDLElBQVQsbUNBQUk7QUFLaUIsSUFJckIsK0NBQWdCO0FBS2lCLElBSWpDLHFDQUFNO0FBS2lCLElBS3ZCLDJDQUFZLGFBQUMsR0FBVztBQUlGO0FBQThEO0FBQXlFO0FBQTZEO0FBQXlHO3dEQTdEcFUsVUFBVTs7Ozs7MEJBQ0w7QUFBQywrQkFyRVA7QUFBRSxFQXFFd0MsaUJBQWlCO0FBQzFELFNBRFksb0JBQW9CO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGludGVyZmFjZSBTYWZhcmlWaWV3Q29udHJvbGxlck9wdGlvbnMge1xuICBhbmltYXRlZD86IGJvb2xlYW47XG4gIGJhckNvbG9yPzogc3RyaW5nO1xuICBjb250cm9sVGludENvbG9yPzogc3RyaW5nO1xuICBlbnRlclJlYWRlck1vZGVJZkF2YWlsYWJsZT86IGJvb2xlYW47XG4gIGhpZGRlbj86IGJvb2xlYW47XG4gIHNob3dEZWZhdWx0U2hhcmVNZW51SXRlbT86IGJvb2xlYW47XG4gIHRpbnRDb2xvcj86IHN0cmluZztcbiAgdG9vbGJhckNvbG9yPzogc3RyaW5nO1xuICB0cmFuc2l0aW9uPzogc3RyaW5nO1xuICB1cmw/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQG5hbWUgU2FmYXJpIFZpZXcgQ29udHJvbGxlclxuICogQGRlc2NyaXB0aW9uXG4gKiBGb3IgZGlzcGxheWluZyByZWFkLW9ubHkgd2ViIGNvbnRlbnQuXG4gKlxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IGBjb3Jkb3ZhLXBsdWdpbi1zYWZhcml2aWV3Y29udHJvbGxlcmAuIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgdGhlIFtTYWZhcmkgVmlldyBDb250cm9sbGVyIHBsdWdpbiBkb2NzXShodHRwczovL2dpdGh1Yi5jb20vRWRkeVZlcmJydWdnZW4vY29yZG92YS1wbHVnaW4tc2FmYXJpdmlld2NvbnRyb2xsZXIpLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgU2FmYXJpVmlld0NvbnRyb2xsZXIgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3NhZmFyaS12aWV3LWNvbnRyb2xsZXIvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHNhZmFyaVZpZXdDb250cm9sbGVyOiBTYWZhcmlWaWV3Q29udHJvbGxlcikgeyB9XG4gKlxuICogLi4uXG4gKlxuICogdGhpcy5zYWZhcmlWaWV3Q29udHJvbGxlci5pc0F2YWlsYWJsZSgpXG4gKiAgIC50aGVuKChhdmFpbGFibGU6IGJvb2xlYW4pID0+IHtcbiAqICAgICAgIGlmIChhdmFpbGFibGUpIHtcbiAqXG4gKiAgICAgICAgIHRoaXMuc2FmYXJpVmlld0NvbnRyb2xsZXIuc2hvdyh7XG4gKiAgICAgICAgICAgdXJsOiAnaHR0cDovL2lvbmljLmlvJyxcbiAqICAgICAgICAgICBoaWRkZW46IGZhbHNlLFxuICogICAgICAgICAgIGFuaW1hdGVkOiBmYWxzZSxcbiAqICAgICAgICAgICB0cmFuc2l0aW9uOiAnY3VybCcsXG4gKiAgICAgICAgICAgZW50ZXJSZWFkZXJNb2RlSWZBdmFpbGFibGU6IHRydWUsXG4gKiAgICAgICAgICAgdGludENvbG9yOiAnI2ZmMDAwMCdcbiAqICAgICAgICAgfSlcbiAqICAgICAgICAgLnN1YnNjcmliZSgocmVzdWx0OiBhbnkpID0+IHtcbiAqICAgICAgICAgICAgIGlmKHJlc3VsdC5ldmVudCA9PT0gJ29wZW5lZCcpIGNvbnNvbGUubG9nKCdPcGVuZWQnKTtcbiAqICAgICAgICAgICAgIGVsc2UgaWYocmVzdWx0LmV2ZW50ID09PSAnbG9hZGVkJykgY29uc29sZS5sb2coJ0xvYWRlZCcpO1xuICogICAgICAgICAgICAgZWxzZSBpZihyZXN1bHQuZXZlbnQgPT09ICdjbG9zZWQnKSBjb25zb2xlLmxvZygnQ2xvc2VkJyk7XG4gKiAgICAgICAgICAgfSxcbiAqICAgICAgICAgICAoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcilcbiAqICAgICAgICAgKTtcbiAqXG4gKiAgICAgICB9IGVsc2Uge1xuICogICAgICAgICAvLyB1c2UgZmFsbGJhY2sgYnJvd3NlciwgZXhhbXBsZSBJbkFwcEJyb3dzZXJcbiAqICAgICAgIH1cbiAqICAgICB9XG4gKiAgICk7XG4gKiBgYGBcbiAqIEBpbnRlcmZhY2VzXG4gKiBTYWZhcmlWaWV3Q29udHJvbGxlck9wdGlvbnNcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdTYWZhcmlWaWV3Q29udHJvbGxlcicsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXNhZmFyaXZpZXdjb250cm9sbGVyJyxcbiAgcGx1Z2luUmVmOiAnU2FmYXJpVmlld0NvbnRyb2xsZXInLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL0VkZHlWZXJicnVnZ2VuL2NvcmRvdmEtcGx1Z2luLXNhZmFyaXZpZXdjb250cm9sbGVyJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNhZmFyaVZpZXdDb250cm9sbGVyIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogQ2hlY2tzIGlmIFNhZmFyaVZpZXdDb250cm9sbGVyIGlzIGF2YWlsYWJsZVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNBdmFpbGFibGUoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNob3dzIFNhZmFyaSBWaWV3IENvbnRyb2xsZXJcbiAgICogQHBhcmFtIG9wdGlvbnMge1NhZmFyaVZpZXdDb250cm9sbGVyT3B0aW9uc30gb3B0aW9uYWxcbiAgICogQHJldHVybnMge09ic2VydmFibGU8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDEsXG4gICAgZXJyb3JJbmRleDogMixcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICB9KVxuICBzaG93KG9wdGlvbnM/OiBTYWZhcmlWaWV3Q29udHJvbGxlck9wdGlvbnMpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBIaWRlcyBTYWZhcmkgVmlldyBDb250cm9sbGVyXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGhpZGUoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVHJpZXMgdG8gY29ubmVjdCB0byB0aGUgIENocm9tZSdzIGN1c3RvbSB0YWJzIHNlcnZpY2UuIHlvdSBtdXN0IGNhbGwgdGhpcyBtZXRob2QgYmVmb3JlIGNhbGxpbmcgYW55IG9mIHRoZSBvdGhlciBtZXRob2RzIGxpc3RlZCBiZWxvdy5cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgY29ubmVjdFRvU2VydmljZSgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsIHRoaXMgbWV0aG9kIHdoZW5ldmVyIHRoZXJlJ3MgYSBjaGFuY2UgdGhlIHVzZXIgd2lsbCBvcGVuIGFuIGV4dGVybmFsIHVybC5cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgd2FybVVwKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvciBldmVuIGJldHRlciBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24sIGNhbGwgdGhpcyBtZXRob2RzIGlmIHRoZXJlJ3MgbW9yZSB0aGFuIGEgNTAlIGNoYW5jZSB0aGUgdXNlciB3aWxsIG9wZW4gYSBjZXJ0YWluIFVSTC5cbiAgICogQHBhcmFtIHVybHtzdHJpbmd9XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIG1heUxhdW5jaFVybCh1cmw6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=