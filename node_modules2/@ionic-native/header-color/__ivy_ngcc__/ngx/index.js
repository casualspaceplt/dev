import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
var HeaderColor = /** @class */ (function (_super) {
    __extends(HeaderColor, _super);
    function HeaderColor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HeaderColor.prototype.tint = function (color) { return cordova(this, "tint", { "callbackStyle": "object", "successName": "success", "errorName": "failure" }, arguments); };
    HeaderColor.pluginName = "HeaderColor";
    HeaderColor.plugin = "cordova-plugin-headercolor";
    HeaderColor.pluginRef = "plugins.headerColor";
    HeaderColor.repo = "https://github.com/tomloprod/cordova-plugin-headercolor";
    HeaderColor.platforms = ["Android"];
HeaderColor.ɵfac = function HeaderColor_Factory(t) { return ɵHeaderColor_BaseFactory(t || HeaderColor); };
HeaderColor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HeaderColor, factory: function (t) { return HeaderColor.ɵfac(t); } });
var ɵHeaderColor_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(HeaderColor);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeaderColor, [{
        type: Injectable
    }], null, null); })();
    return HeaderColor;
}(IonicNativePlugin));
export { HeaderColor };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvaGVhZGVyLWNvbG9yL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztBQUN4RTtBQUlVLElBcUJ1QiwrQkFBaUI7QUFBQztBQUU5QjtBQUVqQjtBQUFNLElBT1IsMEJBQUksYUFBQyxLQUFhO0FBSXlFO0FBQTRDO0FBQXVEO0FBQW1EO0FBQWtGOytDQWhCcFUsVUFBVTs7Ozs7MEJBQ0w7QUFBQyxzQkEzQlA7QUFBRSxFQTJCK0IsaUJBQWlCO0FBQ2pELFNBRFksV0FBVztBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbi8qKlxuICogQG5hbWUgSGVhZGVyIENvbG9yXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvcmRvdmEgcGx1Z2luIHRvIGNoYW5nZSBjb2xvciBvZiBoZWFkZXIgaW4gQW5kcm9pZCBNdWx0aXRhc2sgVmlld1xuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgSGVhZGVyQ29sb3IgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2hlYWRlci1jb2xvci9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgaGVhZGVyQ29sb3I6IEhlYWRlckNvbG9yKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLmhlYWRlckNvbG9yLnRpbnQoJyNiZWNiMjknKTtcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0hlYWRlckNvbG9yJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4taGVhZGVyY29sb3InLFxuICBwbHVnaW5SZWY6ICdwbHVnaW5zLmhlYWRlckNvbG9yJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS90b21sb3Byb2QvY29yZG92YS1wbHVnaW4taGVhZGVyY29sb3InLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBIZWFkZXJDb2xvciBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIFNldCBhIGNvbG9yIHRvIHRoZSB0YXNrIGhlYWRlclxuICAgKiBAcGFyYW0gY29sb3Ige3N0cmluZ30gVGhlIGhleCB2YWx1ZSBvZiB0aGUgY29sb3JcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBjYWxsYmFja1N0eWxlOiAnb2JqZWN0JyxcbiAgICBzdWNjZXNzTmFtZTogJ3N1Y2Nlc3MnLFxuICAgIGVycm9yTmFtZTogJ2ZhaWx1cmUnLFxuICB9KVxuICB0aW50KGNvbG9yOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19